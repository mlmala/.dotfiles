#!/usr/bin/env bash
# -----------------------------------------------------------------------------
# ml-debug
# -----------------------------------------------------------------------------
# Minimal, modular debug launcher using rofi menus.
#
# Responsibilities:
#   - "--init [DOTFILES_DIR]": generate ~/.config/ml-debug/config.json by
#     scanning modules in <DOTFILES_DIR> (default: $HOME/.dotfiles).
#   - Interactive mode (no args):
#       1) Read config.json
#       2) Show a first-level menu with groups (e.g., [general], [flatpak], ...)
#       3) Show a second-level menu with tools of the selected group
#       4) Launch the chosen script in background, with per-tool logging
#
# Dependencies (beyond POSIX sh):
#   - bash (>= 4)
#   - rofi
#   - jq
#   - libnotify (notify-send)
#
# Layout expectations:
#   - Shared libs:
#       $HOME/.local/share/mlsh/ml-utils.sh
#       $HOME/.local/share/mlsh/ml-menu.sh
#   - Tools live in:
#       $HOME/.local/share/mlsh/<script>.sh
#   - Config file:
#       $HOME/.config/ml-debug/config.json
#   - Dotfiles repo default root:
#       $HOME/.dotfiles
#
# JSON structure example (generated by --init):
#   {
#     "[general]": {"[video]": "ml-video.sh"},
#     "[flatpak]": {"[flatpak1]": "ml-flatpak1.sh"}
#   }
# -----------------------------------------------------------------------------
set -o errexit -o pipefail -o nounset

: "${HOME:?}"
CONFIG_DIR="${HOME}/.config/ml-debug"
CONFIG_JSON="${CONFIG_DIR}/config.json"
TOOLS_DIR="${HOME}/.local/share/mlsh"
LIB_UTILS="${TOOLS_DIR}/ml-utils.sh"
LIB_MENU="${TOOLS_DIR}/ml-menu.sh"
DEFAULT_DOTFILES_ROOT="${HOME}/.dotfiles"

if [[ ! -r "${LIB_UTILS}" || ! -r "${LIB_MENU}" ]]; then
  echo "FATAL: Missing ml-utils.sh or ml-menu.sh under ${TOOLS_DIR}" >&2
  exit 1
fi
# shellcheck source=/dev/null
source "${LIB_UTILS}"
# shellcheck source=/dev/null
source "${LIB_MENU}"

mkdir -p "${CONFIG_DIR}"

label_from_script() {
  local f="$1"
  f="$(basename -- "$f")"
  f="${f%.sh}"
  f="${f#ml-}"
  printf "[%s]\n" "$f"
}

# Extract optional @about description from script header.
extract_about() {
  local file="$1"
  local about
  about=$(grep -m1 '^# *@about:' "$file" 2>/dev/null | sed 's/^# *@about:[[:space:]]*//')
  printf "%s\n" "$about"
}

json_for_dir() {
  local dir="$1"
  local jq_obj='{}'
  shopt -s nullglob
  local scripts=("${dir}"/*.sh)
  shopt -u nullglob
  for s in "${scripts[@]:-}"; do
    if [[ -f "$s" && -x "$s" ]]; then
      local label fname
      label="$(label_from_script "$s")"
      fname="$(basename -- "$s")"
      jq_obj="$(jq --arg k "$label" --arg v "$fname" '. + {($k): $v}' <<<"$jq_obj")"
    fi
  done
  printf "%s\n" "$jq_obj"
}

cmd_init() {
  local root="${1:-$DEFAULT_DOTFILES_ROOT}"
  ml_require jq rofi || exit 127
  [[ -d "$root" ]] || { ml_echo_error "Dotfiles root not found: $root"; exit 2; }
  local general_dir="${root}/mlsh/.local/share/mlsh"
  [[ -d "$general_dir" ]] || { ml_echo_error "Missing base module at: $general_dir"; exit 2; }

  local result='{}'
  local general_json; general_json="$(json_for_dir "$general_dir")"
  result="$(jq --argjson o "$general_json" '. + {"[general]": $o}' <<<"$result")"

  local mod dir group gjson
  for mod in "$root"/*; do
    [[ "$(basename -- "$mod")" == "mlsh" ]] && continue
    dir="$mod/.local/share/mlsh"
    [[ -d "$dir" ]] || continue
    group="[$(basename -- "$mod")]"
    gjson="$(json_for_dir "$dir")"
    result="$(jq --arg g "$group" --argjson o "$gjson" '. + {($g): $o}' <<<"$result")"
  done

  local all='{}' groups g sub
  groups=$(jq -r 'keys[]' <<<"$result")
  while IFS= read -r g; do
    sub=$(jq -c --arg k "$g" '.[$k]' <<<"$result")
    all=$(jq -s '.[0] * .[1]' <(printf '%s' "$all") <(printf '%s' "$sub"))
  done <<< "$groups"
  result="$(jq --argjson all "$all" '. + {"[all]": $all}' <<<"$result")"

  mkdir -p "${CONFIG_DIR}"
  printf '%s\n' "$result" > "${CONFIG_JSON}.tmp$$"
  mv "${CONFIG_JSON}.tmp$$" "$CONFIG_JSON"

  ml_notify "ml-debug" "Config generated at ${CONFIG_JSON}"
  ml_echo_info "Config generated at ${CONFIG_JSON}"
}

run_interactive() {
  ml_require jq rofi || exit 127
  [[ -s "${CONFIG_JSON}" ]] || { ml_notify "ml-debug" "Missing ${CONFIG_JSON}. Run: ml-debug --init"; exit 3; }

  local groups sel_group
  groups="$(jq -r 'keys[]' "${CONFIG_JSON}")"
  if ! sel_group="$(printf '%s\n' "$groups" | ml_menu_select "Select module")"; then
    exit 0
  fi

  local tools sel_tool_line sel_tool_label sel_tool_file
  tools="$(jq -r --arg k "$sel_group" '.[$k] | to_entries[] | "\(.key)\t\(.value)"' "${CONFIG_JSON}")"

  # Enhance with @about info if available.
  local enriched_tools=""
  while IFS=$'\t' read -r label file; do
    local about desc_line
    about="$(extract_about "${TOOLS_DIR}/${file}")"
    desc_line="${label}\t${about}"
    enriched_tools+="${desc_line}\n"
  done <<< "$tools"

  if ! sel_tool_line="$(printf '%b' "$enriched_tools" | ml_menu_select "${sel_group} ")"; then
    exit 0
  fi

  sel_tool_label="$sel_tool_line"
  sel_tool_file="$(printf '%s\n' "$tools" | awk -F"\t" -v k="$sel_tool_label" '$1==k{print $2; exit}')"
  [[ -z "${sel_tool_file}" ]] && { ml_notify "ml-debug" "Invalid selection"; exit 1; }

  local script_path="${TOOLS_DIR}/${sel_tool_file}"
  [[ -x "$script_path" ]] || { ml_notify "ml-debug" "Script not executable: ${script_path}"; exit 1; }

  ml_run_tool "$script_path" "${sel_tool_label}"
}

main() {
  case "${1:-}" in
    --init)
      shift || true
      cmd_init "${1:-$DEFAULT_DOTFILES_ROOT}"
      ;;
    "" )
      run_interactive
      ;;
    *)
      echo "Usage:\n  ml-debug --init [DOTFILES_DIR]\n  ml-debug" >&2
      exit 64
      ;;
  esac
}

main "$@"
